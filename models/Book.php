<?php

namespace app\models;

use common\models\ClientHasClub;
use Yii;
use yii\db\Exception;
use yii\helpers\ArrayHelper;

/**
 * This is the model class for table "book".
 *
 * @property int $id
 * @property string $name
 * @property string $date
 * @property string $isbn
 * @property string|null $description
 * @property string|null $photo
 *
 * @property BookHasAuthor[] $bookHasAuthors
 */
class Book extends \yii\db\ActiveRecord
{

    public $authors;

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'book';
    }


    public function behaviors()
    {
        return [
            'files' => [
                'class' => 'floor12\files\components\FileBehaviour',
                'attributes' => [
                    'photo',
                ],
            ],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['name', 'date', 'isbn'], 'required'],
            [['date'], 'safe'],
            [['description'], 'string'],
            [['name'], 'string', 'max' => 255],
            [['isbn'], 'string', 'max' => 32],
            [['isbn'], 'k-isbn'],
            ['authors', 'safe'],

            // Avatar allow to uploade 1 file with this extensions: jpg, png, jpeg, gif
            ['photo', 'file', 'extensions' => ['jpg', 'png', 'jpeg', 'gif'], 'maxFiles' => 1],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'name' => 'Название',
            'date' => 'Год выпуска',
            'isbn' => 'Isbn',
            'description' => 'Описание',
            'photo' => 'Фото главной страницы',
            'authors' => 'Авторы',
        ];
    }

    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub

        $transaction = \Yii::$app->db->beginTransaction();
        try {
            $this->addNewAuthors();

            $transaction->commit();
        } catch (\Exception $e) {
            $transaction->rollBack();
            throw $e;
        }

        if ($insert && $this->authors){
            $this->sendSMS();
        }
        return true;
    }

    protected function sendSMS(){
        $subscribers = Subscribe::find()->where(['author_id' => $this->authors])->all();

        $api = new \yiidreamteam\smspilot\Api('XXXXXXXXXXXXYYYYYYYYYYYYZZZZZZZZXXXXXXXXXXXXYYYYYYYYYYYYZZZZZZZZ');
        foreach ($subscribers as $subscribe){
            $result = preg_replace('/[(+)\s-]+/', '', $subscribe->phone);
            $api->send($result, "New book '{$this->name}'");
        }
    }

    /**
     * Gets query for [[BookHasAuthors]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getBookHasAuthors()
    {
        return $this->hasMany(BookHasAuthor::class, ['book_id' => 'id']);
    }

    /**
     *
     * @throws Exception update failed
     */
    protected function addNewAuthors()
    {
        // Add new records
        if ($this->authors) {
            BookHasAuthor::deleteAll(['book_id' => $this->id]);
            foreach ($this->authors as $authorId) {
                $bookHasAuthor = new BookHasAuthor();
                $bookHasAuthor->book_id = $this->id;
                $bookHasAuthor->author_id = $authorId;

                if (!$bookHasAuthor->save()) {
                    throw new Exception('Failed to save related records.');
                }
            }
        }
    }

    public function afterFind()
    {
        $this->authors = ArrayHelper::map($this->bookHasAuthors, 'author_id', 'author_id');

        parent::afterFind();
    }

    public function getAuthorsList(){
        return ArrayHelper::map($this->bookHasAuthors, 'author_id','author.full_name');
    }
}
